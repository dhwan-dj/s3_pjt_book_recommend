# -*- coding: utf-8 -*-
"""AI_16_김동환_Section3.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EW7hbIa7yPkbR2falCQOAoqvwMC2OtsD
"""

# 라이브러리 불러오기
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import sklearn
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

plt.style.use("default")

# 파일 불러오기 (local에서 업로드)
from google.colab import files
files.upload()

# 파일 불러오기 (local에서 업로드)
df = pd.read_csv('yes_book.csv', encoding='utf-8-sig')
df.head()

df.info()

df = df.dropna(axis=0, how='any')
df.shape

df2 = pd.read_excel('national.xls')
df2.head()

# '카테고리'열이 '테마'이면 '서브 카테고리'열의 데이터로 통합
df2.loc[df2['카테고리'] == '테마', '카테고리'] = df2['서브 카테고리']
df2 = df2.drop(columns=['서브 카테고리', '제어번호', 'ISBN', 'Unnamed: 11', 'Unnamed: 12','Unnamed: 13'])
df2.head()

from pandas._libs.algos import diff_2d

df2['서명_수정'] = df2['서명'].str.split(':').str[0]
df2['서명'] = df2['서명_수정']

df2['서명_수정'] = df2['서명'].str.replace('[()]','')
df2['서명'] = df2['서명_수정']

df.loc[df['title'].isin(df2['서명']), 'category'] = df2.loc[df2['서명'].isin(df['title']), '카테고리']
df.loc[df['category'].isnull(), 'category'] = df['type']

from datetime import datetime

# '2021년 4월'을 '2021-04'처럼 datetime 형식으로 바꾸기
df['date'] = pd.to_datetime(df['date'], format='%Y년 %m월')
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month

df.head()

df = df.fillna(0)

df['price'] = df['price'].astype(int)
df['sales'] = df['sales'].astype(int)
df['review_num'] = df['review_num'].astype(int)

df.head()

df.rename(columns={'Unnamed: 0':'id'}, inplace=True)
df.rename(columns={'review_num':'review_cnt'}, inplace=True)

# 군집화를 위해 수치 데이터프레임 제작
dfn = df[['year', 'month', 'price', 'sales', 'review_cnt', 'review_score']]
#dfn = df[['id', 'year', 'month', 'price', 'sales', 'review_cnt', 'review_score']]

dfn.head()

dfn.describe()

# 컬럼별 데이터분포를 살펴본다.
column_list = ['year', 'month', 'price', 'sales', 'review_cnt', 'review_score']

for column in column_list:
  sns.distplot(df[column])
  plt.show()

# sales, review_count : right skewed 되어 있는 분포에 log transformtion을 시행
dfn['sales'] = dfn['sales'].replace(0, np.finfo(np.float).eps)
dfn['sales_log'] = np.log(dfn['sales'])

sns.distplot(dfn['sales_log']);

dfn['review_cnt'] = dfn['review_cnt'].replace(0, np.finfo(np.float).eps)
dfn['review_count_log'] = np.log(dfn['review_cnt'])

sns.distplot(dfn['review_count_log']);

log_dfn = dfn[['price', 'sales_log', 'review_count_log', 'review_score']]

log_dfn.head()

scaler = StandardScaler()
dfn_scaled = scaler.fit_transform(log_dfn)

print('mean: ', dfn_scaled.mean(axis=0).round(2))
print('std: ', dfn_scaled.std(axis=0).round(2))

"""# **Build Clustering Model**"""

# 로그변환, 스케일링된 수치 데이터프레임으로 클러스터링 개수를 정한다.
sse = {}

for k in range(1,10):
  kmeans = KMeans(n_clusters=k, random_state=1)
  kmeans.fit(dfn_scaled)
  sse[k] = kmeans.inertia_

# 결과 시각화

plt.title('The Elbow Method')
plt.xlabel('Values of k')
plt.ylabel('SSE')
sns.pointplot(x=list(sse.keys()), y=list(sse.values()))
plt.show()

"""- 기울기가 급격히 변하는 개수인 5개의 그룹으로 나누는게 합당하다.

# **최종 모델 학습 : K-Means Clustering**
"""

# 최종 모델 학습
kmeans = KMeans(n_clusters=5, max_iter=50, random_state=42)
kmeans.fit(dfn_scaled)

# 고객별 클러스터 지정
cluster_labels = kmeans.labels_

df_k5 = df.assign(Cluster = cluster_labels)

df_k5['sales']=log_dfn['sales_log']
df_k5['review_cnt']=log_dfn['review_count_log']

df_k5.head()

df_k5.groupby(['Cluster']).agg({
    'price': 'mean',
    'sales': 'mean',
    'review_cnt': 'mean',
    'review_score': 'mean',
    'year': 'mean',
    'month': 'mean',
    'id': 'count'
}).sort_values(by='sales', ascending=False)

"""- 그룹 0 = 베스트셀러 : 판매량, 리뷰수, 평점 최고
---
- 그룹 1 = 대중의 실망 : 판매량은 2위지만, 리뷰와 평점은 없다. (마케팅? 비추천)
---
- 그룹 3 = 조용한 취향 : 가장 고가지만 중간 판매량, 소수의 높은 평점...
- 그룹 2 = 덕후의 선택 : 판매는 적지만, 리뷰수 2위, 평점 2위!
---
- 그룹 4 = 사서의 추천 실패 : 판매량도, 리뷰도, 평점도 없다.
"""

df_k5.groupby('category').agg({
    'price': 'mean',
    'sales': 'mean',
    'review_cnt': 'mean',
    'review_score': 'mean',
    'year': 'mean',
    'month': 'mean',
    'id': 'count'
}).sort_values(by='sales', ascending=False)

"""# 추천 예시 : 환경 카테고리에서, "베스트셀러"를 판매량 순으로 추천 = "그룹 0"
"""

df_k5.loc[(df_k5['category']== '환경') & (df_k5['Cluster']== 0)].sort_values(by='sales', ascending=False)

"""# 미분류 [도서] 카테고리에서, "덕후의 선택" 도서를 판매량 순으로 추천 -> "그룹 2"
"""

df_k5.loc[(df_k5['category']== '[도서]') & (df_k5['Cluster']== 2)].sort_values(by='sales', ascending=False).head(5)

"""# 문학 카테고리에서, "조용한 취향" 도서를 판매량 순으로 추천 -> "그룹 3"
"""

df_k5.loc[(df_k5['category']== '문학') & (df_k5['Cluster']== 3)].sort_values(by='sales', ascending=False).head(5)